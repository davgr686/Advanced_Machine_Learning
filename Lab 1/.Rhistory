preds <- c()
for (i in 1:dim(data)[1]) {
sample <- unlist(data[i, -2])
prob <- cpquery(fitted,
event=eval(parse(text="(S=='yes')")),
evidence=list(A=sample[1], T = sample[2], L = sample[3], B = sample[4], E = sample[5], X = sample[6], D = sample[7]),
method="lw")
if (prob >= 0.5) {
preds[i] <- 'yes'
}
else {
preds[i] <- 'no'
}
}
return (preds)
}
preds <- predict_smoke_asia(bnet_fitted, test)
mean(preds == test$S)
preds <- predict_smoke_asia(bnet_true_fitted, test)
mean(preds == test$S)
bnet <- hc(x = train, restart = 5, score = "aic")
bnet_fitted <- bn.fit(bnet, train)
preds <- predict_smoke_asia(bnet_fitted, test)
mean(preds == test$S)
preds1 <- predict_smoke_asia(bnet_fitted, test)
?equal
mean(preds == preds1)
preds <- predict_smoke_asia(bnet_fitted, test)
mean(preds == test$S)
preds <- predict_smoke_asia(bnet_true_fitted, test)
mean(preds == test$S)
prop.table(preds, test$S)
prop.table(table(preds, test$S))
prop.table(table("preds" = preds, "true" = test$S))
bnet <- hc(x = train, restart = 5, score = "bic")
bnet_fitted <- bn.fit(bnet, train)
plot(bnet)
preds <- predict_smoke_asia(bnet_fitted, test)
mean(preds == test$S)
prop.table(table("preds" = preds, "true" = test$S))
preds <- predict_smoke_asia(bnet_true_fitted, test)
mean(preds == test$S)
prop.table(table("preds" = preds, "true" = test$S))
plot(dag)
plot(bnet)
plot(dag)
prop.table(table("preds" = preds, "true" = test$S))
table("preds" = preds, "true" = test$S)
prop.table(table("preds" = preds, "true" = test$S))
prop.table(table("preds" = preds, "true" = test$S))
## creates junction tree
# bnet_grain <- compile(bnet_grain)
# querygrain(bnet_grain, nodes = c("S"))
#
dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
bnet_true_fitted <- bn.fit(dag, train)
plot(dag)
preds <- predict_smoke_asia(bnet_true_fitted, test)
mean(preds == test$S)
prop.table(table("preds" = preds, "true" = test$S))
mean(preds == test$S)
?mb
?bn.learn.mb
mb(bnet_fitted, "S")
plot(dag)
list(A='yes', T = 'no')
plot(bnet)
plot(dag)
plot(bnet)
list(mb(bnet_fitted, "S"))
test <- list(mb(bnet_fitted, "S"))
test
View(test)
predict_smoke_asia_mb <- function(fitted, data) {
preds <- c()
for (i in 1:dim(data)[1]) {
sample <- unlist(data[i, -2])
prob <- cpquery(fitted,
event=eval(parse(text="(S=='yes')")),
evidence=list(L = sample[3], B = sample[4]),
method="lw")
if (prob >= 0.5) {
preds[i] <- 'yes'
}
else {
preds[i] <- 'no'
}
}
return (preds)
}
## part 3
preds <- predict_smoke_asia_mb(bnet_fitted, test)
## part 3
preds <- predict_smoke_asia_mb(bnet_fitted, test)
library(bnlearn)
data(asia)
#set.seed(1234)
# The equivalent sample size expresses the strength of our belief in the prior distribution.
# likelihood-equivalence Bayesian Dirichlet (BDe)
par(mfrow=c(1,2))
bnet1 <- hc(x = asia, restart = 5, score = "bde", iss = 1)
bnet1 <- cpdag(bnet1)
plot(bnet1)
bnet2 <- hc(x = asia, restart = 5, score = "bde", iss = 5)
bnet2 <- cpdag(bnet2)
plot(bnet2)
all.equal(bnet1, bnet2)
# "Different number of directed/undirected arcs"
data(learning.test)
# part 2
#BiocManager::install("graph")
library(gRain)
n=dim(asia)[1]
id=sample(1:n, floor(n*0.8))
train=asia[id,]
test=asia[-id,]
predict_smoke_asia <- function(fitted, data) {
preds <- c()
for (i in 1:dim(data)[1]) {
sample <- unlist(data[i, -2])
prob <- cpquery(fitted,
event=eval(parse(text="(S=='yes')")),
evidence=list(A=sample[1], T = sample[2], L = sample[3], B = sample[4], E = sample[5], X = sample[6], D = sample[7]),
method="lw")
if (prob >= 0.5) {
preds[i] <- 'yes'
}
else {
preds[i] <- 'no'
}
}
return (preds)
}
predict_smoke_asia_mb <- function(fitted, data) {
preds <- c()
for (i in 1:dim(data)[1]) {
sample <- unlist(data[i, -2])
prob <- cpquery(fitted,
event=eval(parse(text="(S=='yes')")),
evidence=list(L = sample[3], B = sample[4]),
method="lw")
if (prob >= 0.5) {
preds[i] <- 'yes'
}
else {
preds[i] <- 'no'
}
}
return (preds)
}
bnet <- hc(x = train, restart = 5, score = "bic")
bnet_fitted <- bn.fit(bnet, train)
plot(bnet)
preds <- predict_smoke_asia(bnet_fitted, test)
mean(preds == test$S)
prop.table(table("preds" = preds, "true" = test$S))
dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
bnet_true_fitted <- bn.fit(dag, train)
plot(dag)
preds <- predict_smoke_asia(bnet_true_fitted, test)
mean(preds == test$S)
prop.table(table("preds" = preds, "true" = test$S))
## part 3
preds <- predict_smoke_asia_mb(bnet_fitted, test)
mean(preds == test$S)
prop.table(table("preds" = preds, "true" = test$S))
preds <- predict_smoke_asia_mb(bnet_true_fitted, test)
mean(preds == test$S)
prop.table(table("preds" = preds, "true" = test$S))
n_bn <- model2network("[S][A|S][T|S][L|S][B|S][E|S][X|S][D|S]")
n_bn_fitted <- bn.fit(n_bn, train)
plot(n_bn_fitted)
plot(n_bn)
# The equivalent sample size expresses the strength of our belief in the prior distribution.
# likelihood-equivalence Bayesian Dirichlet (BDe)
par(mfrow=c(1,1))
plot(n_bn)
preds <- predict_smoke_asia(n_bn_fitted, test)
mean(preds == test$S)
prop.table(table("preds" = preds, "true" = test$S))
?hc
?bn.fit
library(bnlearn)
data(asia)
#set.seed(1234)
# The equivalent sample size expresses the strength of our belief in the prior distribution.
# likelihood-equivalence Bayesian Dirichlet (BDe)
bnet1 <- hc(x = asia, restart = 5, score = "bde", iss = 1)
bnet1 <- cpdag(bnet1)
plot(bnet1)
bnet2 <- hc(x = asia, restart = 5, score = "bde", iss = 5)
bnet2 <- cpdag(bnet2)
plot(bnet2)
all.equal(bnet1, bnet2)
# "Different number of directed/undirected arcs"
data(learning.test)
# part 2
#BiocManager::install("graph")
library(gRain)
n=dim(asia)[1]
id=sample(1:n, floor(n*0.8))
train=asia[id,]
test=asia[-id,]
predict_smoke_asia <- function(fitted, data) {
preds <- c()
for (i in 1:dim(data)[1]) {
sample <- unlist(data[i, -2])
prob <- cpquery(fitted,
event=eval(parse(text="(S=='yes')")),
evidence=list(A=sample[1], T = sample[2], L = sample[3], B = sample[4], E = sample[5], X = sample[6], D = sample[7]),
method="lw")
if (prob >= 0.5) {
preds[i] <- 'yes'
}
else {
preds[i] <- 'no'
}
}
return (preds)
}
predict_smoke_asia_mb <- function(fitted, data) {
preds <- c()
for (i in 1:dim(data)[1]) {
sample <- unlist(data[i, -2])
prob <- cpquery(fitted,
event=eval(parse(text="(S=='yes')")),
evidence=list(L = sample[3], B = sample[4]),
method="lw")
if (prob >= 0.5) {
preds[i] <- 'yes'
}
else {
preds[i] <- 'no'
}
}
return (preds)
}
bnet <- hc(x = train, restart = 5, score = "bic")
bnet_fitted <- bn.fit(bnet, train)
plot(bnet)
preds <- predict_smoke_asia(bnet_fitted, test)
mean(preds == test$S)
prop.table(table("preds" = preds, "true" = test$S))
dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
bnet_true_fitted <- bn.fit(dag, train)
plot(dag)
preds <- predict_smoke_asia(bnet_true_fitted, test)
mean(preds == test$S)
prop.table(table("preds" = preds, "true" = test$S))
## part 3
preds <- predict_smoke_asia_mb(bnet_fitted, test)
mean(preds == test$S)
prop.table(table("preds" = preds, "true" = test$S))
preds <- predict_smoke_asia_mb(bnet_true_fitted, test)
mean(preds == test$S)
prop.table(table("preds" = preds, "true" = test$S))
## the accuracy is the same as to when using the whole BN
## part 4
## Xi, Xj independent | S, for all Xi,Xj
## P(s,X1...Xn) = P(S)P(X1|S)*P(X2|S)...P(Xn|S)
n_bn <- model2network("[S][A|S][T|S][L|S][B|S][E|S][X|S][D|S]")
n_bn_fitted <- bn.fit(n_bn, train)
plot(n_bn)
preds <- predict_smoke_asia(n_bn_fitted, test)
mean(preds == test$S)
prop.table(table("preds" = preds, "true" = test$S))
?cpquery
plot(bnet)
bnet_fitted.plot
bnet_fitted.fit.plot
?plot.bn
graphviz.plot(bnet, layout = "dot")
preds <- predict_smoke_asia(bnet_fitted, test)
mean(preds == test$S)
prop.table(table("preds" = preds, "true" = test$S))
dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
bnet_true_fitted <- bn.fit(dag, train)
plot(dag)
preds <- predict_smoke_asia(bnet_true_fitted, test)
mean(preds == test$S)
prop.table(table("preds" = preds, "true" = test$S))
plot(n_bn)
plot(dag)
?cpdist
prop.table(table("true" = test$S, "preds" = preds))
preds <- predict_smoke_asia(bnet_fitted, test)
mean(preds == test$S)
prop.table(table("true" = test$S, "preds" = preds))
preds <- predict_smoke_asia(bnet_fitted, test)
mean(preds == test$S)
prop.table(table("true" = test$S, "preds" = preds))
0.350 + 0.398
preds <- predict_smoke_asia(bnet_true_fitted, test)
mean(preds == test$S)
prop.table(table("true" = test$S, "preds" = preds))
preds <- predict_smoke_asia(bnet_true_fitted, test)
preds <- predict_smoke_asia(bnet_fitted, test)
preds <- predict_smoke_asia(bnet_true_fitted, test)
preds1 <- predict_smoke_asia(bnet_true_fitted, test)
preds <- predict_smoke_asia(bnet_fitted, test)
mean(preds1 = preds)
mean(preds1 == preds)
preds <- predict_smoke_asia(bnet_fitted, test)
preds1 <- predict_smoke_asia(bnet_true_fitted, test)
mean(preds1 == preds)
dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
bnet_true_fitted <- bn.fit(dag, train)
plot(dag)
preds_true <- predict_smoke_asia(bnet_true_fitted, test)
mean(preds_true == test$S)
prop.table(table("true" = test$S, "preds" = preds_true))
bnet <- hc(x = train, restart = 5, score = "bic")
bnet_fitted <- bn.fit(bnet, train)
plot(bnet)
preds <- predict_smoke_asia(bnet_fitted, test)
mean(preds == test$S)
prop.table(table("true" = test$S, "preds" = preds))
preds == preds1
mean(preds == preds1)
bnet <- hc(x = train, score = "bic")
bnet_fitted <- bn.fit(bnet, train)
plot(bnet)
preds <- predict_smoke_asia(bnet_fitted, test)
mean(preds == test$S)
prop.table(table("true" = test$S, "preds" = preds))
dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
bnet_true_fitted <- bn.fit(dag, train)
plot(dag)
preds_true <- predict_smoke_asia(bnet_true_fitted, test)
mean(preds_true == test$S)
prop.table(table("true" = test$S, "preds" = preds_true))
?cpquery
mean(preds == preds1)
## part 3
preds <- predict_smoke_asia_mb(bnet_fitted, test)
mean(preds == test$S)
prop.table(table("true" = test$S, "preds" = preds))
preds <- predict_smoke_asia_mb(bnet_true_fitted, test)
mean(preds == test$S)
prop.table(table("true" = test$S, "preds" = preds))
bnet <- hc(x = train, score = "bic")
bnet_fitted <- bn.fit(bnet, train)
plot(bnet)
preds <- predict_smoke_asia(bnet_fitted, test)
mean(preds == test$S)
prop.table(table("true" = test$S, "preds" = preds))
dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
bnet_true_fitted <- bn.fit(dag, train)
plot(dag)
preds_true <- predict_smoke_asia(bnet_true_fitted, test)
mean(preds_true == test$S)
prop.table(table("true" = test$S, "preds" = preds_true))
?cpquery
plot(dag)
plot(bnet)
plot(dag)
plot(bnet)
?mb
library(bnlearn)
?mb
plot(bnet2)
plot(n_bn)
library(bnlearn)
?mbdata(asia)
#set.seed(1234)
# The equivalent sample size expresses the strength of our belief in the prior distribution.
# likelihood-equivalence Bayesian Dirichlet (BDe)
bnet1 <- hc(x = asia, restart = 5, score = "bde", iss = 1)
bnet1 <- cpdag(bnet1)
plot(bnet1)
bnet2 <- hc(x = asia, restart = 5, score = "bde", iss = 5)
bnet2 <- cpdag(bnet2)
plot(bnet2)
all.equal(bnet1, bnet2)
# "Different number of directed/undirected arcs"
# part 2
#BiocManager::install("graph")
n=dim(asia)[1]
id=sample(1:n, floor(n*0.8))
train=asia[id,]
test=asia[-id,]
predict_smoke_asia <- function(fitted, data) {
preds <- c()
for (i in 1:dim(data)[1]) {
sample <- unlist(data[i, -2])
prob <- cpquery(fitted,
event=eval(parse(text="(S=='yes')")),
evidence=list(A=sample[1],
T = sample[2],
L = sample[3],
B = sample[4],
E = sample[5],
X = sample[6],
D = sample[7]),
method="lw")
if (prob >= 0.5) {
preds[i] <- 'yes'
}
else {
preds[i] <- 'no'
}
}
return (preds)
}
predict_smoke_asia_mb <- function(fitted, data) {
preds <- c()
for (i in 1:dim(data)[1]) {
sample <- unlist(data[i, -2])
prob <- cpquery(fitted,
event=eval(parse(text="(S=='yes')")),
evidence=list(L = sample[3], B = sample[4]),
method="lw")
if (prob >= 0.5) {
preds[i] <- 'yes'
}
else {
preds[i] <- 'no'
}
}
return (preds)
}
bnet <- hc(x = train, score = "bic")
bnet_fitted <- bn.fit(bnet, train)
plot(bnet)
preds <- predict_smoke_asia(bnet_fitted, test)
mean(preds == test$S)
prop.table(table("true" = test$S, "preds" = preds))
dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
bnet_true_fitted <- bn.fit(dag, train)
plot(dag)
preds_true <- predict_smoke_asia(bnet_true_fitted, test)
mean(preds_true == test$S)
prop.table(table("true" = test$S, "preds" = preds_true))
## part 3
preds <- predict_smoke_asia_mb(bnet_fitted, test)
mean(preds == test$S)
prop.table(table("true" = test$S, "preds" = preds))
preds <- predict_smoke_asia_mb(bnet_true_fitted, test)
mean(preds == test$S)
prop.table(table("true" = test$S, "preds" = preds))
## the accuracy is the same as to when using the whole BN
## part 4
## Xi, Xj independent | S, for all Xi,Xj
## P(s,X1...Xn) = P(S)P(X1|S)*P(X2|S)...P(Xn|S)
n_bn <- model2network("[S][A|S][T|S][L|S][B|S][E|S][X|S][D|S]")
n_bn_fitted <- bn.fit(n_bn, train)
plot(n_bn)
preds <- predict_smoke_asia(n_bn_fitted, test)
mean(preds == test$S)
prop.table(table("true" = test$S, "preds" = preds))
mean(preds == test$S)
prop.table(table("true" = test$S, "preds" = preds))
mean(preds_true == test$S)
plot(bnet1)
plot(bnet2)
plot(bnet1)
plot(bnet2)
bnet1 <- cpdag(bnet1)
plot(bnet1)
plot(bnet2)
bnet1 <- hc(x = asia, restart = 1, score = "bic")
bnet1 <- cpdag(bnet1)
plot(bnet1)
bnet2 <- hc(x = asia, restart = 10, score = "bic")
bnet2 <- cpdag(bnet2)
plot(bnet2)
bnet1 <- hc(x = asia, score = "bic")
bnet1 <- cpdag(bnet1)
plot(bnet1)
bnet2 <- hc(x = asia, restart = 10, score = "bic")
bnet2 <- cpdag(bnet2)
plot(bnet2)
all.equal(bnet1, bnet2)
?hc
bnet2 <- hc(x = asia, start = random.graph(names(asia)) score = "bic")
?random.graph
bnet2 <- hc(x = asia, start = random.graph(names(asia)), score = "bic")
bnet2 <- cpdag(bnet2)
plot(bnet2)
all.equal(bnet1, bnet2)
bnet1 <- hc(x = asia, start = random.graph(names(asia)) , score = "bic")
bnet1 <- cpdag(bnet1)
plot(bnet1)
bnet2 <- hc(x = asia, start = random.graph(names(asia)), score = "bic")
bnet2 <- cpdag(bnet2)
plot(bnet2)
all.equal(bnet1, bnet2)
plot(bnet1)
plot(bnet2)
?hc
# "Different number of directed/undirected arcs"
hamming(bnet1, bnet2)
preds <- predict_smoke_asia(bnet_fitted, test)
mean(preds == test$S)
prop.table(table("true" = test$S, "preds" = preds))
0.369 + 0.357
?random.graph
library(bnlearn)
?random.graph
library(bnlearn)
?cpdag
plot(n_bn)
mb(n_bn)
mb(n_bn_fitted)
mb(n_bn, "S")
?bn.fit
plot(bnet)
plot(n_bn)
View(asia)
prop.table(table("true" = test$S, "preds" = preds))
plot(dag)
plot(n_bn)
